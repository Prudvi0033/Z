// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth relations
  accounts      Account[]
  sessions      Session[]

  // Your custom fields
  username      String?   @unique
  password      String?
  description   String?   @db.Text
  location      String?
  website       String?
  dateOfJoining DateTime  @default(now())

  // Your relations
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  bookmarks     Bookmark[]

  following     Follow[]  @relation("UserFollowing")
  followers     Follow[]  @relation("UserFollowers")

  notification         Notification[] @relation("NotificationReceiver")
  triggeredNotification Notification[] @relation("NotificationTrigger")
}

model Account {
  id                String    @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  accessToken       String?   @db.Text
  refreshToken      String?   @db.Text
  idToken           String?   @db.Text
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  expiresAt    DateTime
  token        String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  userId       String
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
}

model Post {
  id        String    @id @default(cuid())
  message   String    @db.Text
  postImage String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments  Comment[]
  votes     Vote[]
  bookmarks Bookmark[]
  notification  Notification[]

  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id          String    @id @default(cuid())
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  postId      String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  notification  Notification[]

  @@index([postId])
  @@index([userId])
}

model Vote {
  id        String    @id @default(cuid())
  type      VoteType
  createdAt DateTime  @default(now())

  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Bookmark {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())

  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Follow {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())

  followerId  String
  follower    User      @relation("UserFollowing", fields: [followerId], references: [id])

  followingId String
  following   User      @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId    String
  user      User             @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  triggeredById String?
  triggeredBy   User?          @relation("NotificationTrigger", fields: [triggeredById], references: [id], onDelete: Cascade)

  postId    String?
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([isRead])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}